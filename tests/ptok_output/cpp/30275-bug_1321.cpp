Line [Parent]            Text
1    [PP_INCLUDE]        #
1    [NONE]              include
1    [NONE]              <utility>
1    [NONE]              
3    [NONE]              template
3    [TEMPLATE]          <
3    [NONE]              typename
3    [NONE]              Fun
3    [NONE]              ,
3    [NONE]              typename
3    [NONE]              ...
3    [NONE]              Args
3    [TEMPLATE]          >
3    [NONE]              
4    [NONE]              inline
4    [NONE]              decltype
4    [TYPE_CAST]         (
4    [NONE]              auto
4    [TYPE_CAST]         )
4    [NONE]              Invoke
4    [FUNC_CALL]         (
4    [NONE]              Fun
4    [NONE]              &&
4    [NONE]              f
4    [NONE]              ,
4    [NONE]              Args
4    [NONE]              &&
4    [NONE]              ...
4    [NONE]              args
4    [FUNC_CALL]         )
4    [NONE]              
5    [NONE]              noexcept
5    [NONE]              (
5    [NONE]              noexcept
5    [NONE]              (
5    [NONE]              std
5    [NONE]              ::
5    [NONE]              forward
5    [TEMPLATE]          <
5    [NONE]              Fun
5    [TEMPLATE]          >
5    [FUNC_CALL]         (
5    [NONE]              f
5    [FUNC_CALL]         )
5    [FUNC_CALL]         (
5    [NONE]              std
5    [NONE]              ::
5    [NONE]              forward
5    [TEMPLATE]          <
5    [NONE]              Args
5    [TEMPLATE]          >
5    [FUNC_CALL]         (
5    [NONE]              args
5    [FUNC_CALL]         )
5    [NONE]              ...
5    [FUNC_CALL]         )
5    [NONE]              )
5    [NONE]              )
5    [NONE]              
6    [NONE]              {
6    [NONE]              return
6    [NONE]              std
6    [NONE]              ::
6    [NONE]              forward
6    [TEMPLATE]          <
6    [NONE]              Fun
6    [TEMPLATE]          >
6    [FUNC_CALL]         (
6    [NONE]              f
6    [FUNC_CALL]         )
6    [FUNC_CALL]         (
6    [NONE]              std
6    [NONE]              ::
6    [NONE]              forward
6    [TEMPLATE]          <
6    [NONE]              Args
6    [TEMPLATE]          >
6    [FUNC_CALL]         (
6    [NONE]              args
6    [FUNC_CALL]         )
6    [NONE]              ...
6    [FUNC_CALL]         )
6    [NONE]              ;
6    [NONE]              }
6    [NONE]              