Line [Token]             Text
1    [NEWLINE]           
2    [ENUM]              enum
2    [TYPE]              token
2    [NEWLINE]           
3    [BRACE_OPEN]        {
3    [NEWLINE]           
4    [WORD]              t_type
4    [COMMA]             ,
4    [NEWLINE]           
5    [TAG]               Rational
5    [TAG_COLON]         :
5    [WORD]              t_value
5    [COMMA]             ,
5    [NEWLINE]           
6    [WORD]              t_word
6    [SQUARE_OPEN]       [
6    [NUMBER]            20
6    [SQUARE_CLOSE]      ]
6    [COMMA]             ,
6    [NEWLINE]           
7    [BRACE_CLOSE]       }
7    [NEWLINE]           
10   [NEW]               new
10   [TAG]               bool
10   [TAG_COLON]         :
10   [WORD]              flag
10   [ASSIGN]            =
10   [WORD]              true
10   [VSEMICOLON]        ;
10   [COMMENT]           /* "flag" can only hold "true" or "false" */
10   [NEWLINE]           
11   [QUALIFIER]         const
11   [TAG]               error
11   [TAG_COLON]         :
11   [WORD]              success
11   [ASSIGN]            =
11   [NUMBER]            0
11   [VSEMICOLON]        ;
11   [NEWLINE]           
12   [QUALIFIER]         const
12   [TAG]               error
12   [TAG_COLON]         :
12   [WORD]              fatal
12   [ASSIGN]            =
12   [NUMBER]            1
12   [VSEMICOLON]        ;
12   [NEWLINE]           
13   [QUALIFIER]         const
13   [TAG]               error
13   [TAG_COLON]         :
13   [WORD]              nonfatal
13   [ASSIGN]            =
13   [NUMBER]            2
13   [VSEMICOLON]        ;
13   [NEWLINE]           
14   [TAG]               error
14   [TAG_COLON]         :
14   [WORD]              errno
14   [ASSIGN]            =
14   [WORD]              fatal
14   [VSEMICOLON]        ;
14   [NEWLINE]           
16   [NATIVE]            native
16   [FUNC_PROTO]        printf
16   [FPAREN_OPEN]       (
16   [QUALIFIER]         const
16   [WORD]              format
16   [TSQUARE]           []
16   [COMMA]             ,
16   [BRACE_OPEN]        {
16   [WORD]              Float
16   [COMMA]             ,
16   [WORD]              _
16   [BRACE_CLOSE]       }
16   [TAG_COLON]         :
16   [ELLIPSIS]          ...
16   [FPAREN_CLOSE]      )
16   [SEMICOLON]         ;
16   [NEWLINE]           
18   [NEW]               new
18   [TAG]               Float
18   [TAG_COLON]         :
18   [WORD]              chance_to_avoid
18   [ASSIGN]            =
18   [PAREN_OPEN]        (
18   [WORD]              p_resists
18   [SQUARE_OPEN]       [
18   [WORD]              id
18   [SQUARE_CLOSE]      ]
18   [SQUARE_OPEN]       [
18   [WORD]              RESISTIDX_FIRE
18   [SQUARE_CLOSE]      ]
18   [COMPARE]           >=
18   [WORD]              RESIST_MAX_VALUE
18   [PAREN_CLOSE]       )
18   [QUESTION]          ?
18   [NEWLINE]           
19   [NUMBER_FP]         1.00
19   [COND_COLON]        :
19   [PAREN_OPEN]        (
19   [FUNCTION]          float
19   [PAREN_OPEN]        (
19   [WORD]              p_resists
19   [SQUARE_OPEN]       [
19   [WORD]              id
19   [SQUARE_CLOSE]      ]
19   [SQUARE_OPEN]       [
19   [WORD]              RESISTIDX_FIRE
19   [SQUARE_CLOSE]      ]
19   [PAREN_CLOSE]       )
19   [ARITH]             /
19   [FUNCTION]          float
19   [PAREN_OPEN]        (
19   [WORD]              RESIST_MAX_VALUE
19   [PAREN_CLOSE]       )
19   [PAREN_CLOSE]       )
19   [VSEMICOLON]        ;
19   [NEWLINE]           
21   [WORD]              xplevel_lev
21   [SQUARE_OPEN]       [
21   [WORD]              j
21   [SQUARE_CLOSE]      ]
21   [ASSIGN]            =
21   [WORD]              XP_PER_LEVEL_BASE_LT
21   [ARITH]             +
21   [PAREN_OPEN]        (
21   [PAREN_OPEN]        (
21   [WORD]              j
21   [ARITH]             -
21   [NUMBER]            10
21   [PAREN_CLOSE]       )
21   [ARITH]             *
21   [WORD]              XP_PER_LEVEL_LT
21   [PAREN_CLOSE]       )
21   [ARITH]             +
21   [NEWLINE]           
22   [FUNCTION]          floatround
22   [PAREN_OPEN]        (
22   [FUNCTION]          float
22   [PAREN_OPEN]        (
22   [WORD]              j
22   [ARITH]             /
22   [NUMBER]            20
22   [PAREN_CLOSE]       )
22   [ARITH]             *
22   [WORD]              XP_PER_LEVEL_LT
22   [PAREN_CLOSE]       )
22   [SEMICOLON]         ;
22   [NEWLINE]           
25   [FUNC_DEF]          main
25   [FPAREN_OPEN]       (
25   [FPAREN_CLOSE]      )
25   [NEWLINE]           
25   [BRACE_OPEN]        {
25   [NEWLINE]           
26   [NEW]               new
26   [TAG]               Float
26   [TAG_COLON]         :
26   [WORD]              xpos
26   [VSEMICOLON]        ;
26   [NEWLINE]           
27   [NEW]               new
27   [TAG]               Float
27   [TAG_COLON]         :
27   [WORD]              ypos
27   [VSEMICOLON]        ;
27   [NEWLINE]           
29   [NEW]               new
29   [TAG]               apple
29   [TAG_COLON]         :
29   [WORD]              elstar
29   [VSEMICOLON]        ;
29   [COMMENT]           /* variable "elstar" with tag "apple" */
29   [NEWLINE]           
30   [NEW]               new
30   [TAG]               orange
30   [TAG_COLON]         :
30   [WORD]              valencia
30   [VSEMICOLON]        ;
30   [COMMENT]           /* variable "valencia" with tag "orange" */
30   [NEWLINE]           
31   [NEW]               new
31   [TYPE]              x
31   [VSEMICOLON]        ;
31   [COMMENT]           /* untagged variable "x" */
31   [NEWLINE]           
32   [WORD]              elstar
32   [ASSIGN]            =
32   [TYPE]              valencia
32   [VSEMICOLON]        ;
32   [COMMENT]           /* tag mismatch */
32   [NEWLINE]           
33   [WORD]              elstar
33   [ASSIGN]            =
33   [TYPE]              x
33   [VSEMICOLON]        ;
33   [COMMENT]           /* tag mismatch */
33   [NEWLINE]           
34   [WORD]              x
34   [ASSIGN]            =
34   [WORD]              valencia
34   [VSEMICOLON]        ;
34   [COMMENT]           /* ok */
34   [NEWLINE]           
36   [NEW]               new
36   [TAG]               Float
36   [TAG_COLON]         :
36   [WORD]              chance_to_avoid
36   [ASSIGN]            =
36   [PAREN_OPEN]        (
36   [WORD]              p_resists
36   [SQUARE_OPEN]       [
36   [WORD]              id
36   [SQUARE_CLOSE]      ]
36   [SQUARE_OPEN]       [
36   [WORD]              RESISTIDX_FIRE
36   [SQUARE_CLOSE]      ]
36   [COMPARE]           >=
36   [WORD]              RESIST_MAX_VALUE
36   [PAREN_CLOSE]       )
36   [QUESTION]          ?
36   [NEWLINE]           
37   [NUMBER_FP]         1.00
37   [COND_COLON]        :
37   [PAREN_OPEN]        (
37   [FUNC_CALL]         float
37   [FPAREN_OPEN]       (
37   [WORD]              p_resists
37   [SQUARE_OPEN]       [
37   [WORD]              id
37   [SQUARE_CLOSE]      ]
37   [SQUARE_OPEN]       [
37   [WORD]              RESISTIDX_FIRE
37   [SQUARE_CLOSE]      ]
37   [FPAREN_CLOSE]      )
37   [ARITH]             /
37   [FUNC_CALL]         float
37   [FPAREN_OPEN]       (
37   [WORD]              RESIST_MAX_VALUE
37   [FPAREN_CLOSE]      )
37   [PAREN_CLOSE]       )
37   [VSEMICOLON]        ;
37   [NEWLINE]           
39   [WORD]              xplevel_lev
39   [SQUARE_OPEN]       [
39   [WORD]              j
39   [SQUARE_CLOSE]      ]
39   [ASSIGN]            =
39   [WORD]              XP_PER_LEVEL_BASE_LT
39   [ARITH]             +
39   [PAREN_OPEN]        (
39   [PAREN_OPEN]        (
39   [WORD]              j
39   [ARITH]             -
39   [NUMBER]            10
39   [PAREN_CLOSE]       )
39   [ARITH]             *
39   [WORD]              XP_PER_LEVEL_LT
39   [PAREN_CLOSE]       )
39   [ARITH]             +
39   [NEWLINE]           
40   [FUNC_CALL]         floatround
40   [FPAREN_OPEN]       (
40   [FUNC_CALL]         float
40   [FPAREN_OPEN]       (
40   [WORD]              j
40   [ARITH]             /
40   [NUMBER]            20
40   [FPAREN_CLOSE]      )
40   [ARITH]             *
40   [WORD]              XP_PER_LEVEL_LT
40   [FPAREN_CLOSE]      )
40   [SEMICOLON]         ;
40   [NEWLINE]           
42   [IF]                if
42   [SPAREN_OPEN]       (
42   [TAG]               apple
42   [TAG_COLON]         :
42   [WORD]              valencia
42   [COMPARE]           <
42   [WORD]              elstar
42   [SPAREN_CLOSE]      )
42   [BRACE_OPEN]        {
42   [NEWLINE]           
43   [WORD]              valencia
43   [ASSIGN]            =
43   [TAG]               orange
43   [TAG_COLON]         :
43   [TYPE]              elstar
43   [VSEMICOLON]        ;
43   [NEWLINE]           
43   [BRACE_CLOSE]       }
43   [NEWLINE]           
45   [LABEL]             some_label
45   [LABEL_COLON]       :
45   [COMMENT_CPP]       // target for a goto
45   [NEWLINE]           
46   [PREPROC]           #
46   [PP_PRAGMA]         pragma
46   [PREPROC_BODY]      rational Float
46   [NEWLINE]           
48   [NEW]               new
48   [TAG]               Float
48   [TAG_COLON]         :
48   [WORD]              limit
48   [ASSIGN]            =
48   [NEG]               -
48   [NUMBER_FP]         5.0
48   [VSEMICOLON]        ;
48   [NEWLINE]           
49   [NEW]               new
49   [TAG]               Float
49   [TAG_COLON]         :
49   [WORD]              value
49   [ASSIGN]            =
49   [NEG]               -
49   [NUMBER_FP]         1.0
49   [VSEMICOLON]        ;
49   [NEWLINE]           
50   [IF]                if
50   [SPAREN_OPEN]       (
50   [WORD]              value
50   [COMPARE]           <
50   [WORD]              limit
50   [SPAREN_CLOSE]      )
50   [BRACE_OPEN]        {
50   [NEWLINE]           
51   [FUNC_CALL]         printf
51   [FPAREN_OPEN]       (
51   [STRING]            "Value %f below limit %f\n"
51   [COMMA]             ,
51   [TAG]               _
51   [TAG_COLON]         :
51   [WORD]              value
51   [COMMA]             ,
51   [TAG]               _
51   [TAG_COLON]         :
51   [WORD]              limit
51   [FPAREN_CLOSE]      )
51   [VSEMICOLON]        ;
51   [NEWLINE]           
51   [BRACE_CLOSE]       }
52   [ELSE]              else
52   [BRACE_OPEN]        {
52   [NEWLINE]           
53   [FUNC_CALL]         printf
53   [FPAREN_OPEN]       (
53   [STRING]            "Value above limit\n"
53   [FPAREN_CLOSE]      )
53   [VSEMICOLON]        ;
53   [NEWLINE]           
53   [BRACE_CLOSE]       }
53   [NEWLINE]           
54   [GOTO]              goto
54   [WORD]              some_label
54   [VSEMICOLON]        ;
54   [NEWLINE]           
55   [BRACE_CLOSE]       }
55   [NEWLINE]           
57   [FUNC_DEF]          foo
57   [FPAREN_OPEN]       (
57   [FPAREN_CLOSE]      )
57   [NEWLINE]           
58   [BRACE_OPEN]        {
58   [NEWLINE]           
58   [IF]                if
58   [SPAREN_OPEN]       (
58   [WORD]              ape
58   [SPAREN_CLOSE]      )
58   [BRACE_OPEN]        {
58   [NEWLINE]           
59   [FUNC_CALL]         dofunc
59   [FPAREN_OPEN]       (
59   [NUMBER]            1
59   [FPAREN_CLOSE]      )
59   [VSEMICOLON]        ;
59   [NEWLINE]           
59   [BRACE_CLOSE]       }
60   [ELSE]              else
60   [ELSEIF]            if
60   [SPAREN_OPEN]       (
60   [WORD]              monkey
60   [SPAREN_CLOSE]      )
60   [BRACE_OPEN]        {
60   [NEWLINE]           
61   [FUNC_CALL]         dofunc
61   [FPAREN_OPEN]       (
61   [NUMBER]            2
61   [FPAREN_CLOSE]      )
61   [VSEMICOLON]        ;
61   [NEWLINE]           
61   [BRACE_CLOSE]       }
62   [ELSE]              else
62   [BRACE_OPEN]        {
62   [NEWLINE]           
63   [FUNC_CALL]         dofunc
63   [FPAREN_OPEN]       (
63   [NUMBER]            3
63   [FPAREN_CLOSE]      )
63   [VSEMICOLON]        ;
63   [NEWLINE]           
63   [BRACE_CLOSE]       }
63   [NEWLINE]           
63   [BRACE_CLOSE]       }