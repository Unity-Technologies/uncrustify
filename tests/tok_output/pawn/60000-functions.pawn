Line [Token]             Text
1    [NEWLINE]           
2    [COMMENT_CPP]       // prototypes
2    [NEWLINE]           
3    [FORWARD]           forward
3    [FUNC_PROTO]        bar
3    [FPAREN_OPEN]       (
3    [FPAREN_CLOSE]      )
3    [VSEMICOLON]        ;
3    [NEWLINE]           
4    [NATIVE]            native
4    [FUNC_PROTO]        baz
4    [FPAREN_OPEN]       (
4    [FPAREN_CLOSE]      )
4    [VSEMICOLON]        ;
4    [NEWLINE]           
5    [FUNC_PROTO]        foo
5    [FPAREN_OPEN]       (
5    [FPAREN_CLOSE]      )
5    [SEMICOLON]         ;
5    [NEWLINE]           
7    [ENUM]              enum
7    [TYPE]              rect
7    [BRACE_OPEN]        {
7    [WORD]              left
7    [COMMA]             ,
7    [WORD]              top
7    [COMMA]             ,
7    [WORD]              right
7    [COMMA]             ,
7    [WORD]              bottom
7    [BRACE_CLOSE]       }
7    [NEWLINE]           
8    [NATIVE]            native
8    [FUNC_PROTO]        intersect
8    [SQUARE_OPEN]       [
8    [WORD]              rect
8    [SQUARE_CLOSE]      ]
8    [FPAREN_OPEN]       (
8    [WORD]              src1
8    [SQUARE_OPEN]       [
8    [WORD]              rect
8    [SQUARE_CLOSE]      ]
8    [COMMA]             ,
8    [WORD]              src2
8    [SQUARE_OPEN]       [
8    [WORD]              rect
8    [SQUARE_CLOSE]      ]
8    [FPAREN_CLOSE]      )
8    [VSEMICOLON]        ;
8    [NEWLINE]           
10   [NATIVE]            native
10   [FUNC_PROTO]        getparam
10   [FPAREN_OPEN]       (
10   [WORD]              a
10   [TSQUARE]           []
10   [COMMA]             ,
10   [WORD]              b
10   [TSQUARE]           []
10   [COMMA]             ,
10   [WORD]              size
10   [FPAREN_CLOSE]      )
10   [ASSIGN]            =
10   [TYPE]              host_getparam
10   [VSEMICOLON]        ;
10   [NEWLINE]           
12   [COMMENT_CPP]       // function w/o brace
12   [NEWLINE]           
13   [FUNC_DEF]          main
13   [FPAREN_OPEN]       (
13   [FPAREN_CLOSE]      )
13   [NEWLINE]           
14   [BRACE_OPEN]        {
14   [NEWLINE]           
14   [FUNC_CALL]         printf
14   [FPAREN_OPEN]       (
14   [STRING]            "hello\n"
14   [FPAREN_CLOSE]      )
14   [VSEMICOLON]        ;
14   [NEWLINE]           
14   [BRACE_CLOSE]       }
14   [NEWLINE]           
15   [FUNC_DEF]          foo
15   [FPAREN_OPEN]       (
15   [FPAREN_CLOSE]      )
15   [NEWLINE]           
15   [BRACE_OPEN]        {
15   [NEWLINE]           
15   [FUNC_CALL]         bar
15   [FPAREN_OPEN]       (
15   [FPAREN_CLOSE]      )
15   [VSEMICOLON]        ;
15   [NEWLINE]           
15   [BRACE_CLOSE]       }
15   [NEWLINE]           
17   [STOCK]             stock
17   [FUNC_DEF]          ts_is_waiting
17   [FPAREN_OPEN]       (
17   [WORD]              id
17   [FPAREN_CLOSE]      )
17   [NEWLINE]           
17   [BRACE_OPEN]        {
17   [NEWLINE]           
17   [RETURN]            return
17   [PAREN_OPEN]        (
17   [FUNC_CALL]         ts_get_message
17   [FPAREN_OPEN]       (
17   [WORD]              id
17   [FPAREN_CLOSE]      )
17   [COMPARE]           ==
17   [WORD]              TSMSG_WAITING
17   [PAREN_CLOSE]       )
17   [VSEMICOLON]        ;
17   [NEWLINE]           
17   [BRACE_CLOSE]       }
17   [NEWLINE]           
19   [COMMENT_CPP]       // regular old functions
19   [NEWLINE]           
20   [FUNC_DEF]          baz
20   [FPAREN_OPEN]       (
20   [FPAREN_CLOSE]      )
20   [NEWLINE]           
20   [BRACE_OPEN]        {
20   [NEWLINE]           
21   [FUNC_CALL]         do_something
21   [FPAREN_OPEN]       (
21   [FPAREN_CLOSE]      )
21   [VSEMICOLON]        ;
21   [NEWLINE]           
22   [BRACE_CLOSE]       }
22   [NEWLINE]           