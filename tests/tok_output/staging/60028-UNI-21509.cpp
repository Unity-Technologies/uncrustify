Line [Token]             Text
1    [TYPE]              void
1    [TPAREN_OPEN]       (
1    [PTR_TYPE]          *
1    [FUNC_VAR]          foo
1    [TPAREN_CLOSE]      )
1    [FPAREN_OPEN]       (
1    [TYPE]              int
1    [FPAREN_CLOSE]      )
1    [SEMICOLON]         ;
1    [NEWLINE]           
2    [QUALIFIER]         static
2    [FUNC_CALL]         bar
2    [FPAREN_OPEN]       (
2    [TYPE]              void
2    [PAREN_OPEN]        (
2    [PTR_TYPE]          *
2    [FUNC_VAR]          foo
2    [PAREN_CLOSE]       )
2    [FPAREN_OPEN]       (
2    [TYPE]              int
2    [FPAREN_CLOSE]      )
2    [FPAREN_CLOSE]      )
2    [NEWLINE]           
3    [BRACE_OPEN]        {
3    [NEWLINE]           
4    [BRACE_CLOSE]       }
4    [NEWLINE]           
6    [TYPE]              bool
6    [TPAREN_OPEN]       (
6    [PTR_TYPE]          *
6    [FUNC_VAR]          comp_func
6    [TPAREN_CLOSE]      )
6    [FPAREN_OPEN]       (
6    [QUALIFIER]         const
6    [TYPE]              TypeA
6    [PTR_TYPE]          *
6    [QUALIFIER]         const
6    [WORD]              a
6    [COMMA]             ,
6    [QUALIFIER]         const
6    [TYPE]              TypeB
6    [BYREF]             &
6    [WORD]              value
6    [FPAREN_CLOSE]      )
6    [ASSIGN]            =
6    [WORD]              NULL
6    [SEMICOLON]         ;
6    [NEWLINE]           
7    [QUALIFIER]         static
7    [FUNC_CALL]         foo
7    [FPAREN_OPEN]       (
7    [TYPE]              bool
7    [PAREN_OPEN]        (
7    [PTR_TYPE]          *
7    [FUNC_VAR]          comp_func
7    [PAREN_CLOSE]       )
7    [FPAREN_OPEN]       (
7    [QUALIFIER]         const
7    [TYPE]              TypeA
7    [PTR_TYPE]          *
7    [QUALIFIER]         const
7    [WORD]              a
7    [COMMA]             ,
7    [QUALIFIER]         const
7    [TYPE]              TypeB
7    [BYREF]             &
7    [WORD]              value
7    [FPAREN_CLOSE]      )
7    [FPAREN_CLOSE]      )
7    [SEMICOLON]         ;
7    [NEWLINE]           
8    [QUALIFIER]         static
8    [FUNC_CALL]         foo
8    [FPAREN_OPEN]       (
8    [TYPE]              bool
8    [PAREN_OPEN]        (
8    [PTR_TYPE]          *
8    [FUNC_VAR]          comp_func
8    [PAREN_CLOSE]       )
8    [FPAREN_OPEN]       (
8    [QUALIFIER]         const
8    [TYPE]              TypeA
8    [PTR_TYPE]          *
8    [QUALIFIER]         const
8    [WORD]              a
8    [COMMA]             ,
8    [QUALIFIER]         const
8    [TYPE]              TypeB
8    [BYREF]             &
8    [WORD]              value
8    [FPAREN_CLOSE]      )
8    [ASSIGN]            =
8    [WORD]              NULL
8    [FPAREN_CLOSE]      )
8    [NEWLINE]           
9    [BRACE_OPEN]        {
9    [NEWLINE]           
10   [BRACE_CLOSE]       }
10   [NEWLINE]           
12   [TYPE]              void
12   [FUNC_PROTO]        qsort
12   [FPAREN_OPEN]       (
12   [TYPE]              void
12   [PTR_TYPE]          *
12   [WORD]              base
12   [COMMA]             ,
12   [TYPE]              size_t
12   [WORD]              nmemb
12   [COMMA]             ,
12   [TYPE]              size_t
12   [WORD]              size
12   [COMMA]             ,
12   [TYPE]              int
12   [PAREN_OPEN]        (
12   [PTR_TYPE]          *
12   [FUNC_VAR]          compar
12   [PAREN_CLOSE]       )
12   [FPAREN_OPEN]       (
12   [QUALIFIER]         const
12   [TYPE]              TypeA
12   [PTR_TYPE]          *
12   [WORD]              lhs
12   [COMMA]             ,
12   [QUALIFIER]         const
12   [TYPE]              TypeB
12   [BYREF]             &
12   [WORD]              rhs
12   [FPAREN_CLOSE]      )
12   [FPAREN_CLOSE]      )
12   [SEMICOLON]         ;
12   [NEWLINE]           
13   [TYPE]              void
13   [FUNC_DEF]          qsort
13   [FPAREN_OPEN]       (
13   [TYPE]              void
13   [PTR_TYPE]          *
13   [WORD]              base
13   [COMMA]             ,
13   [TYPE]              size_t
13   [WORD]              nmemb
13   [COMMA]             ,
13   [TYPE]              size_t
13   [WORD]              size
13   [COMMA]             ,
13   [TYPE]              int
13   [TPAREN_OPEN]       (
13   [PTR_TYPE]          *
13   [FUNC_VAR]          compar
13   [TPAREN_CLOSE]      )
13   [FPAREN_OPEN]       (
13   [QUALIFIER]         const
13   [TYPE]              TypeA
13   [PTR_TYPE]          *
13   [WORD]              lhs
13   [COMMA]             ,
13   [QUALIFIER]         const
13   [TYPE]              TypeB
13   [BYREF]             &
13   [WORD]              rhs
13   [FPAREN_CLOSE]      )
13   [ASSIGN]            =
13   [TYPE]              NULL
13   [FPAREN_CLOSE]      )
13   [NEWLINE]           
14   [BRACE_OPEN]        {
14   [NEWLINE]           
15   [BRACE_CLOSE]       }
15   [NEWLINE]           