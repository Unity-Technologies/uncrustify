Line [Token]             Text
1    [COMMENT_CPP]       //TestCase-001
1    [NEWLINE]           
2    [TYPE]              void
2    [FUNC_PROTO]        GetCharacterRenderInfo
2    [FPAREN_OPEN]       (
2    [TYPE]              unsigned
2    [TYPE]              int
2    [WORD]              charCode
2    [COMMA]             ,
2    [TYPE]              int
2    [WORD]              size
2    [COMMA]             ,
2    [TYPE]              unsigned
2    [TYPE]              int
2    [WORD]              style
2    [COMMA]             ,
2    [TYPE]              float
2    [WORD]              pixelsPerPoint
2    [COMMA]             ,
2    [TYPE]              Rectf
2    [BYREF]             &
2    [WORD]              verts
2    [COMMA]             ,
2    [TYPE]              Rectf
2    [BYREF]             &
2    [WORD]              uvs
2    [COMMA]             ,
2    [TYPE]              bool
2    [BYREF]             &
2    [WORD]              flipped
2    [COMMA]             ,
2    [TYPE]              unsigned
2    [TYPE]              int
2    [PTR_TYPE]          *
2    [WORD]              error
2    [ASSIGN]            =
2    [TYPE]              NULL
2    [FPAREN_CLOSE]      )
2    [QUALIFIER]         const
2    [SEMICOLON]         ;
2    [NEWLINE]           
4    [COMMENT_CPP]       //TestCase-002
4    [NEWLINE]           
5    [TYPE]              void
5    [FUNC_PROTO]        AddCharacterInfoEntry
5    [FPAREN_OPEN]       (
5    [QUALIFIER]         const
5    [TYPE]              Rectf
5    [BYREF]             &
5    [WORD]              uv
5    [COMMA]             ,
5    [QUALIFIER]         const
5    [TYPE]              Rectf
5    [BYREF]             &
5    [WORD]              vert
5    [COMMA]             ,
5    [TYPE]              float
5    [WORD]              advance
5    [COMMA]             ,
5    [TYPE]              int
5    [WORD]              character
5    [COMMA]             ,
5    [TYPE]              bool
5    [WORD]              flipped
5    [COMMA]             ,
5    [TYPE]              int
5    [WORD]              size
5    [COMMA]             ,
5    [TYPE]              unsigned
5    [TYPE]              int
5    [WORD]              style
5    [COMMA]             ,
5    [TYPE]              float
5    [WORD]              pixelsPerPoint
5    [FPAREN_CLOSE]      )
5    [SEMICOLON]         ;
5    [NEWLINE]           
7    [COMMENT_CPP]       //TestCase-003
7    [NEWLINE]           
8    [TYPE]              bool
8    [FUNC_PROTO]        CacheFontForText
8    [FPAREN_OPEN]       (
8    [TYPE]              UInt16
8    [PTR_TYPE]          *
8    [WORD]              chars
8    [COMMA]             ,
8    [TYPE]              int
8    [WORD]              length
8    [COMMA]             ,
8    [TYPE]              int
8    [WORD]              size
8    [ASSIGN]            =
8    [NUMBER]            0
8    [COMMA]             ,
8    [TYPE]              float
8    [WORD]              pixelsPerPoint
8    [ASSIGN]            =
8    [NUMBER_FP]         1.0f
8    [COMMA]             ,
8    [TYPE]              unsigned
8    [TYPE]              int
8    [WORD]              style
8    [ASSIGN]            =
8    [TYPE]              kStyleDefault
8    [COMMA]             ,
8    [QUALIFIER]         const
8    [TYPE]              dynamic_array
8    [ANGLE_OPEN]        <
8    [TYPE]              TextFormatChange
8    [ANGLE_CLOSE]       >
8    [PTR_TYPE]          *
8    [WORD]              formats
8    [ASSIGN]            =
8    [TYPE]              NULL
8    [FPAREN_CLOSE]      )
8    [SEMICOLON]         ;
8    [NEWLINE]           
10   [COMMENT_CPP]       //TestCasse-004
10   [NEWLINE]           
11   [FUNC_CALL]         FontImpl
11   [FPAREN_OPEN]       (
11   [TYPE]              MemLabelId
11   [WORD]              label
11   [COMMA]             ,
11   [TYPE]              TextRendering
11   [DC_MEMBER]         ::
11   [TYPE]              Font
11   [PTR_TYPE]          *
11   [WORD]              owningFont
11   [FPAREN_CLOSE]      )
11   [SEMICOLON]         ;
11   [NEWLINE]           