Line [Token]             Text
1    [PREPROC]           #
1    [PP_INCLUDE]        import
1    [PREPROC_BODY]      <Foundation/Foundation.h>
1    [NEWLINE]           
3    [PREPROC]           #
3    [PP_IF]             if
3    [WORD]              TARGET_RT_BIG_ENDIAN
3    [NEWLINE]           
4    [PREPROC]           #
4    [PP_DEFINE]         define
4    [MACRO_FUNC]        FourCC2Str
4    [FPAREN_OPEN]       (
4    [WORD]              fourcc
4    [FPAREN_CLOSE]      )
4    [PAREN_OPEN]        (
4    [QUALIFIER]         const
4    [TYPE]              char
4    [TSQUARE]           []
4    [PAREN_CLOSE]       )
4    [BRACE_OPEN]        {
4    [DEREF]             *
4    [PAREN_OPEN]        (
4    [PAREN_OPEN]        (
4    [TYPE]              char
4    [PTR_TYPE]          *
4    [PAREN_CLOSE]       )
4    [ADDR]              &
4    [WORD]              fourcc
4    [PAREN_CLOSE]       )
4    [COMMA]             ,
4    [DEREF]             *
4    [PAREN_OPEN]        (
4    [PAREN_OPEN]        (
4    [PAREN_OPEN]        (
4    [TYPE]              char
4    [PTR_TYPE]          *
4    [PAREN_CLOSE]       )
4    [ADDR]              &
4    [WORD]              fourcc
4    [PAREN_CLOSE]       )
4    [ARITH]             +
4    [NUMBER]            1
4    [PAREN_CLOSE]       )
4    [COMMA]             ,
4    [DEREF]             *
4    [PAREN_OPEN]        (
4    [PAREN_OPEN]        (
4    [PAREN_OPEN]        (
4    [TYPE]              char
4    [PTR_TYPE]          *
4    [PAREN_CLOSE]       )
4    [ADDR]              &
4    [WORD]              fourcc
4    [PAREN_CLOSE]       )
4    [ARITH]             +
4    [NUMBER]            2
4    [PAREN_CLOSE]       )
4    [COMMA]             ,
4    [DEREF]             *
4    [PAREN_OPEN]        (
4    [PAREN_OPEN]        (
4    [PAREN_OPEN]        (
4    [TYPE]              char
4    [PTR_TYPE]          *
4    [PAREN_CLOSE]       )
4    [ADDR]              &
4    [WORD]              fourcc
4    [PAREN_CLOSE]       )
4    [ARITH]             +
4    [NUMBER]            3
4    [PAREN_CLOSE]       )
4    [COMMA]             ,
4    [NUMBER]            0
4    [BRACE_CLOSE]       }
4    [NEWLINE]           
5    [PREPROC]           #
5    [PP_ELSE]           else
5    [NEWLINE]           
6    [PREPROC]           #
6    [PP_DEFINE]         define
6    [MACRO_FUNC]        FourCC2Str
6    [FPAREN_OPEN]       (
6    [WORD]              fourcc
6    [FPAREN_CLOSE]      )
6    [PAREN_OPEN]        (
6    [QUALIFIER]         const
6    [TYPE]              char
6    [TSQUARE]           []
6    [PAREN_CLOSE]       )
6    [BRACE_OPEN]        {
6    [DEREF]             *
6    [PAREN_OPEN]        (
6    [PAREN_OPEN]        (
6    [PAREN_OPEN]        (
6    [TYPE]              char
6    [PTR_TYPE]          *
6    [PAREN_CLOSE]       )
6    [ADDR]              &
6    [WORD]              fourcc
6    [PAREN_CLOSE]       )
6    [ARITH]             +
6    [NUMBER]            3
6    [PAREN_CLOSE]       )
6    [COMMA]             ,
6    [DEREF]             *
6    [PAREN_OPEN]        (
6    [PAREN_OPEN]        (
6    [PAREN_OPEN]        (
6    [TYPE]              char
6    [PTR_TYPE]          *
6    [PAREN_CLOSE]       )
6    [ADDR]              &
6    [WORD]              fourcc
6    [PAREN_CLOSE]       )
6    [ARITH]             +
6    [NUMBER]            2
6    [PAREN_CLOSE]       )
6    [COMMA]             ,
6    [DEREF]             *
6    [PAREN_OPEN]        (
6    [PAREN_OPEN]        (
6    [PAREN_OPEN]        (
6    [TYPE]              char
6    [PTR_TYPE]          *
6    [PAREN_CLOSE]       )
6    [ADDR]              &
6    [WORD]              fourcc
6    [PAREN_CLOSE]       )
6    [ARITH]             +
6    [NUMBER]            1
6    [PAREN_CLOSE]       )
6    [COMMA]             ,
6    [DEREF]             *
6    [PAREN_OPEN]        (
6    [PAREN_OPEN]        (
6    [PAREN_OPEN]        (
6    [TYPE]              char
6    [PTR_TYPE]          *
6    [PAREN_CLOSE]       )
6    [ADDR]              &
6    [WORD]              fourcc
6    [PAREN_CLOSE]       )
6    [ARITH]             +
6    [NUMBER]            0
6    [PAREN_CLOSE]       )
6    [COMMA]             ,
6    [NUMBER]            0
6    [BRACE_CLOSE]       }
6    [NEWLINE]           
7    [PREPROC]           #
7    [PP_ENDIF]          endif
7    [NEWLINE]           
9    [PREPROC]           #
9    [PP_IF]             if
9    [NUMBER]            1
9    [NEWLINE]           
10   [PREPROC]           #
10   [PP_DEFINE]         define
10   [MACRO_FUNC]        SYNCHRONIZED_BEGIN
10   [FPAREN_OPEN]       (
10   [WORD]              x
10   [FPAREN_CLOSE]      )
10   [FUNC_CALL]         @synchronized
10   [FPAREN_OPEN]       (
10   [WORD]              x
10   [FPAREN_CLOSE]      )
10   [BRACE_OPEN]        {
10   [NEWLINE]           
11   [PREPROC]           #
11   [PP_DEFINE]         define
11   [MACRO]             SYNCHRONIZED_END
11   [BRACE_CLOSE]       }
11   [NEWLINE]           
12   [PREPROC]           #
12   [PP_ELSE]           else
12   [NEWLINE]           
13   [PREPROC]           #
13   [PP_DEFINE]         define
13   [MACRO_FUNC]        SYNCHRONIZED_BEGIN
13   [FPAREN_OPEN]       (
13   [WORD]              x
13   [FPAREN_CLOSE]      )
13   [NEWLINE]           
14   [PREPROC]           #
14   [PP_DEFINE]         define
14   [MACRO]             SYNCHRONIZED_END
14   [NEWLINE]           
15   [PREPROC]           #
15   [PP_ENDIF]          endif
15   [NEWLINE]           
17   [PREPROC]           #
17   [PP_DEFINE]         define
17   [MACRO]             AUTORELEASEPOOL_BEGIN
17   [WORD]              @autoreleasepool
17   [BRACE_OPEN]        {
17   [NEWLINE]           
18   [PREPROC]           #
18   [PP_DEFINE]         define
18   [MACRO]             AUTORELEASEPOOL_END
18   [BRACE_CLOSE]       }
18   [NEWLINE]           