Line [Token]             Text
1    [PREPROC]           #
1    [PP_INCLUDE]        import
1    [PREPROC_BODY]      <Foundation/Foundation.h>
1    [NEWLINE]           
3    [PREPROC]           #
3    [PP_DEFINE]         define
3    [MACRO_FUNC]        MACRO
3    [FPAREN_OPEN]       (
3    [WORD]              foo
3    [FPAREN_CLOSE]      )
3    [NL_CONT]           \
4    [IF]                if
4    [SPAREN_OPEN]       (
4    [WORD]              _
4    [PP]                ##
4    [WORD]              foo
4    [COMPARE]           ==
4    [WORD]              NULL
4    [SPAREN_CLOSE]      )
4    [BRACE_OPEN]        {
4    [NL_CONT]           \
5    [FUNC_CALL]         Log
5    [FPAREN_OPEN]       (
5    [STRING]            "do %s"
5    [COMMA]             ,
5    [FUNC_CALL]         str
5    [FPAREN_OPEN]       (
5    [WORD]              foo
5    [FPAREN_CLOSE]      )
5    [FPAREN_CLOSE]      )
5    [SEMICOLON]         ;
5    [NL_CONT]           \
6    [WORD]              _
6    [PP]                ##
6    [WORD]              foo
6    [ASSIGN]            =
6    [PAREN_OPEN]        (
6    [TYPE]              foo
6    [PP]                ##
6    [TYPE]              _t
6    [PTR_TYPE]          *
6    [PAREN_CLOSE]       )
6    [FUNC_CALL]         process
6    [FPAREN_OPEN]       (
6    [WORD]              PR_FLAG
6    [COMMA]             ,
6    [FUNC_CALL]         str
6    [FPAREN_OPEN]       (
6    [WORD]              foo
6    [FPAREN_CLOSE]      )
6    [FPAREN_CLOSE]      )
6    [SEMICOLON]         ;
6    [NL_CONT]           \
7    [BRACE_CLOSE]       }
7    [NEWLINE]           
9    [PREPROC]           #
9    [PP_DEFINE]         define
9    [MACRO_FUNC]        OVERLOAD
9    [FPAREN_OPEN]       (
9    [WORD]              base
9    [COMMA]             ,
9    [WORD]              foo
9    [FPAREN_CLOSE]      )
9    [NL_CONT]           \
10   [WORD]              foo
10   [PP]                ##
10   [WORD]              _override_t
10   [PTR_TYPE]          *
10   [WORD]              foo
10   [PP]                ##
10   [WORD]              _bar
10   [ASSIGN]            =
10   [PAREN_OPEN]        (
10   [TYPE]              foo
10   [PP]                ##
10   [TYPE]              _override_t
10   [PTR_TYPE]          *
10   [PAREN_CLOSE]       )
10   [FUNC_CALL]         process
10   [FPAREN_OPEN]       (
10   [WORD]              base
10   [PP]                ##
10   [WORD]              _bar
10   [COMMA]             ,
10   [FUNC_CALL]         str
10   [FPAREN_OPEN]       (
10   [WORD]              foo
10   [FPAREN_CLOSE]      )
10   [FPAREN_CLOSE]      )
10   [SEMICOLON]         ;
10   [NL_CONT]           \
11   [WORD]              _
11   [PP]                ##
11   [WORD]              foo
11   [PP]                ##
11   [WORD]              _override
11   [ASSIGN]            =
11   [PAREN_OPEN]        (
11   [TYPE]              foo
11   [PP]                ##
11   [TYPE]              _override_t
11   [PTR_TYPE]          *
11   [PAREN_CLOSE]       )
11   [FUNC_CALL]         process
11   [FPAREN_OPEN]       (
11   [WORD]              base
11   [PP]                ##
11   [WORD]              _cache
11   [COMMA]             ,
11   [FUNC_CALL]         str
11   [FPAREN_OPEN]       (
11   [WORD]              foo
11   [FPAREN_CLOSE]      )
11   [FPAREN_CLOSE]      )
11   [SEMICOLON]         ;
11   [NEWLINE]           