Line [Token]             Text
1    [COMMENT_MULTI]     /*******************************************************␤**␤** A sample program that demonstrates the use of Static embedded SQL.␤** Before compiling this program, be sure you have created a table␤** called video and inserted some tuples in it. ␤**␤********************************************************/
7    [NEWLINE]           
8    [PREPROC]           #
8    [PP_INCLUDE]        include
8    [PREPROC_BODY]      <stdio.h>
8    [NEWLINE]           
10   [COMMENT_MULTI]     /* sqlca: is the sql communications area. All error codes␤   are returned from db2 in that structure which is filled␤   each time an interaction with db2 takes place.␤*/
13   [NEWLINE]           
15   [SQL_EXEC]          EXEC
15   [SQL_WORD]          SQL
15   [SQL_WORD]          INCLUDE
15   [SQL_WORD]          SQLCA
15   [SEMICOLON]         ;
15   [COMMENT]           /* SQL communication area structure */
15   [NEWLINE]           
17   [SQL_BEGIN]         EXEC
17   [SQL_WORD]          SQL
17   [SQL_WORD]          BEGIN
17   [SQL_WORD]          DECLARE
17   [SQL_WORD]          SECTION
17   [SEMICOLON]         ;
17   [COMMENT]           /* declare host variables    */
17   [NEWLINE]           
18   [TYPE]              char
18   [WORD]              db_name
18   [SQUARE_OPEN]       [
18   [NUMBER]            8
18   [SQUARE_CLOSE]      ]
18   [SEMICOLON]         ;
18   [COMMENT]           /* database name             */
18   [NEWLINE]           
19   [TYPE]              char
19   [WORD]              video_title
19   [SQUARE_OPEN]       [
19   [NUMBER]            30
19   [SQUARE_CLOSE]      ]
19   [SEMICOLON]         ;
19   [COMMENT]           /* title of the video        */
19   [NEWLINE]           
20   [TYPE]              short
20   [WORD]              video_id
20   [SEMICOLON]         ;
20   [COMMENT]           /* serial number             */
20   [NEWLINE]           
21   [TYPE]              char
21   [WORD]              director
21   [SQUARE_OPEN]       [
21   [NUMBER]            20
21   [SQUARE_CLOSE]      ]
21   [SEMICOLON]         ;
21   [COMMENT]           /* director name             */
21   [NEWLINE]           
22   [SQL_END]           EXEC
22   [SQL_WORD]          SQL
22   [SQL_WORD]          END
22   [SQL_WORD]          DECLARE
22   [SQL_WORD]          SECTION
22   [SEMICOLON]         ;
22   [NEWLINE]           
24   [COMMENT_MULTI]     /* These lines are redundant here because the default␤   action is to continue. They just show the kind of␤   errors that could arise and one way to control them.␤*/
27   [NEWLINE]           
29   [SQL_EXEC]          EXEC
29   [SQL_WORD]          SQL
29   [SQL_WORD]          WHENEVER
29   [SQL_WORD]          SQLWARNING
29   [SQL_WORD]          CONTINUE
29   [SEMICOLON]         ;
29   [COMMENT]           /* sqlca.sqlcode > 0    */
29   [NEWLINE]           
30   [SQL_EXEC]          EXEC
30   [SQL_WORD]          SQL
30   [SQL_WORD]          WHENEVER
30   [SQL_WORD]          SQLERROR
30   [SQL_WORD]          CONTINUE
30   [SEMICOLON]         ;
30   [COMMENT]           /* sqlca.sqlcode < 0    */
30   [NEWLINE]           
31   [SQL_EXEC]          EXEC
31   [SQL_WORD]          SQL
31   [SQL_WORD]          WHENEVER
31   [SQL_WORD]          NOT
31   [SQL_WORD]          FOUND
31   [SQL_WORD]          CONTINUE
31   [SEMICOLON]         ;
31   [COMMENT]           /* sqlca.sqlcode = 100  */
31   [NEWLINE]           
32   [COMMENT]           /* sqlca.sqlcode = 0 (no error) */
32   [NEWLINE]           
34   [TYPE]              void
34   [FUNC_DEF]          main
34   [FPAREN_OPEN]       (
34   [FPAREN_CLOSE]      )
34   [NEWLINE]           
34   [BRACE_OPEN]        {
34   [NEWLINE]           
36   [FUNC_CALL]         strcpy
36   [FPAREN_OPEN]       (
36   [WORD]              db_name
36   [COMMA]             ,
36   [STRING]            "csc343h"
36   [FPAREN_CLOSE]      )
36   [SEMICOLON]         ;
36   [NEWLINE]           
38   [COMMENT]           /* C variables are preceded by a colon when they are passed to DB2 */
38   [NEWLINE]           
40   [SQL_EXEC]          EXEC
40   [SQL_WORD]          SQL
40   [SQL_WORD]          CONNECT
40   [SQL_WORD]          TO
40   [COLON]             :
40   [SQL_WORD]          db_name
40   [SEMICOLON]         ;
40   [NEWLINE]           
42   [IF]                if
42   [SPAREN_OPEN]       (
42   [WORD]              sqlca
42   [MEMBER]            .
42   [WORD]              sqlcode
42   [COMPARE]           !=
42   [NUMBER]            0
42   [SPAREN_CLOSE]      )
42   [NEWLINE]           
42   [BRACE_OPEN]        {
42   [NEWLINE]           
43   [FUNC_CALL]         printf
43   [FPAREN_OPEN]       (
43   [STRING]            "Connect failed!: reason %ld\n"
43   [COMMA]             ,
43   [WORD]              sqlca
43   [MEMBER]            .
43   [WORD]              sqlcode
43   [FPAREN_CLOSE]      )
43   [SEMICOLON]         ;
43   [NEWLINE]           
44   [FUNC_CALL]         exit
44   [FPAREN_OPEN]       (
44   [NUMBER]            1
44   [FPAREN_CLOSE]      )
44   [SEMICOLON]         ;
44   [NEWLINE]           
45   [BRACE_CLOSE]       }
45   [NEWLINE]           
47   [COMMENT_MULTI]     /* cursor delcaration. Have to declare a cursor each time you␤   want tuples back from db2␤*/
49   [NEWLINE]           
51   [SQL_EXEC]          EXEC
51   [SQL_WORD]          SQL
51   [SQL_WORD]          DECLARE
51   [SQL_WORD]          c1
51   [SQL_WORD]          CURSOR
51   [SQL_WORD]          FOR
51   [NEWLINE]           
52   [SQL_WORD]          SELECT
52   [SQL_WORD]          video_title
52   [NEWLINE]           
53   [SQL_WORD]          FROM
53   [SQL_WORD]          video
53   [SEMICOLON]         ;
53   [NEWLINE]           
55   [COMMENT]           /* you have to open the cursor in order to get tuples back */
55   [NEWLINE]           
57   [SQL_EXEC]          EXEC
57   [SQL_WORD]          SQL
57   [SQL_WORD]          OPEN
57   [SQL_WORD]          c1
57   [SEMICOLON]         ;
57   [NEWLINE]           
59   [DO]                do
59   [NEWLINE]           
59   [BRACE_OPEN]        {
59   [NEWLINE]           
61   [COMMENT_MULTI]     /* fetch tuples from the cursor. This will execute the statement␤     the cursor implements and will return the results */
62   [NEWLINE]           
64   [SQL_EXEC]          EXEC
64   [SQL_WORD]          SQL
64   [SQL_WORD]          FETCH
64   [SQL_WORD]          c1
64   [SQL_WORD]          into
64   [COLON]             :
64   [SQL_WORD]          video_title
64   [SEMICOLON]         ;
64   [NEWLINE]           
65   [IF]                if
65   [SPAREN_OPEN]       (
65   [WORD]              SQLCODE
65   [COMPARE]           !=
65   [NUMBER]            0
65   [SPAREN_CLOSE]      )
65   [NEWLINE]           
65   [BRACE_OPEN]        {
65   [NEWLINE]           
65   [BREAK]             break
65   [SEMICOLON]         ;
65   [COMMENT]           /* SQLCODE refers to sqlca.sqlcode */
65   [NEWLINE]           
65   [BRACE_CLOSE]       }
65   [NEWLINE]           
67   [COMMENT]           /* host variables should have ':' prefix when they are used in DB2 commands */
67   [NEWLINE]           
69   [FUNC_CALL]         printf
69   [FPAREN_OPEN]       (
69   [STRING]            "%s\n"
69   [COMMA]             ,
69   [WORD]              video_title
69   [FPAREN_CLOSE]      )
69   [SEMICOLON]         ;
69   [NEWLINE]           
71   [BRACE_CLOSE]       }
71   [WHILE_OF_DO]       while
71   [SPAREN_OPEN]       (
71   [NUMBER]            1
71   [SPAREN_CLOSE]      )
71   [SEMICOLON]         ;
71   [NEWLINE]           
72   [SQL_EXEC]          EXEC
72   [SQL_WORD]          SQL
72   [SQL_WORD]          CLOSE
72   [SQL_WORD]          c1
72   [SEMICOLON]         ;
72   [NEWLINE]           
73   [SQL_EXEC]          EXEC
73   [SQL_WORD]          SQL
73   [SQL_WORD]          CONNECT
73   [SQL_WORD]          RESET
73   [SEMICOLON]         ;
73   [NEWLINE]           
74   [BRACE_CLOSE]       }
74   [NEWLINE]           