dist: trusty
language: cpp
sudo: false

matrix:
  include:
    - env: BUILD_TYPE=debug
    - env: BUILD_TYPE=release
    - env: BUILD_TYPE=release NO_MACRO_VARARG=1

    # GCC 5
    - env: C_COMPILER=gcc-5 CXX_COMPILER=g++-5
      addons:
        apt:
          update: true
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-5
            - g++-5

    # Clang 3.8 address sanitizer
    - env: BUILD_TYPE=asan C_COMPILER=clang-3.8 CXX_COMPILER=clang++-3.8
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8
          packages:
            - clang-3.8

    # mingw-w64 Win64 cross-compile
    - env: BUILD_TYPE=cross C_COMPILER=x86_64-w64-mingw32-gcc CXX_COMPILER=x86_64-w64-mingw32-g++
      addons:
        apt:
          packages:
            - mingw-w64
            - binutils-mingw-w64
            - binutils-mingw-w64-i686
            - binutils-mingw-w64-x86-64
            - gcc-mingw-w64
            - gcc-mingw-w64-i686
            - gcc-mingw-w64-x86-64
            - g++-mingw-w64
            - g++-mingw-w64-i686
            - g++-mingw-w64-x86-64

    - env: BUILD_TYPE=coverage COVERALLS_TOKEN="iJXKQxvt6RJMcxkn99GIhakcoCx7XvzbU"
      compiler: gcc

branches:
  only:
  - master

before_install:
  - |
    if [ "x${BUILD_TYPE}" == "xcoverage" ]; then
      sudo apt-get update
      sudo apt-get install -qy python3-pip lcov
      pip install gcovr
      pip3 install --user PyYAML
      pip3 install --user --upgrade cpp-coveralls
    fi
  - if [ -n "${C_COMPILER}" ]; then export CC="${C_COMPILER}"; fi
  - if [ -n "${CXX_COMPILER}" ]; then export CXX="${CXX_COMPILER}"; fi
  - ${CXX} --version
  - cmake --version
  - mkdir build
  - cd build

before_script:
  # to stop the script after an error/warning
  - set -e
  - |-
    case "${BUILD_TYPE}" in
      "coverage")
        cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_CODECOVERAGE=ON ..
        ;;
      "asan")
        cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_SANITIZER=address ..
        ;;
      "ubsan")
        cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_SANITIZER=undefined ..
        ;;
      "cross")
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-mingw64.cmake -DCMAKE_EXE_LINKER_FLAGS="-static -s" ..
        ;;
      "release")
        cmake -DCMAKE_BUILD_TYPE=Release ..
        ;;
      *)
        cmake ..
        ;;
    esac


script:
  - make VERBOSE=1
  - if [ "x${BUILD_TYPE}" != "xcross" ]; then ctest -V -j 4; fi
  - if [ "x${BUILD_TYPE}" == "xcoverage" ]; then make coverage; fi
    # test if all the sources are conform to the forUncrustifySources.cfg config file
  - if [ "x${BUILD_TYPE}" == "xrelease" ]; then cd ../ && ./scripts/Run_uncrustify_for_sources.sh; cd -; fi
    # test if uncrustify runs for (some) command line options
  - if [ "x${BUILD_TYPE}" == "xrelease" ]; then cd ../tests/cli && ./test_cli_options.py; cd -; fi
  #- /home/travis/build/uncrustify/uncrustify/build/uncrustify -l cs -c /home/travis/build/uncrustify/uncrustify/tests/config/U10-Cpp.cfg -f /home/travis/build/uncrustify/uncrustify/tests/input/cs/newlines.mm -L A

after_success:
  # publish coverage data to coveralls
  - if [ "x${BUILD_TYPE}" == "xcoverage" ]; then cd ../ && coveralls -l build/cmake_coverage.output -t $COVERALLS_TOKEN; fi
